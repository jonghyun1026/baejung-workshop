import { supabase } from '@/lib/supabase'
import { Tables } from '@/lib/database.types'

export type Room = Tables<'rooms'>
export type RoomAssignment = Tables<'room_assignments'>

// ÏÇ¨Ïö©ÏûêÏùò Î∞© Î∞∞Ï†ï Ï†ïÎ≥¥ Ï°∞Ìöå (user_idÎ°ú)
export async function getUserRoomAssignment(userId: string) {
  try {
    const { data, error } = await supabase
      .from('room_assignments')
      .select(`
        *,
        rooms:room_id (
          room_number,
          building_name,
          capacity,
          Type
        )
      `)
      .eq('user_id', userId)
      .single()

    if (error && error.code !== 'PGRST116') {
      throw error
    }

    return data
  } catch (error) {
    console.error('‚ùå getUserRoomAssignment Ïò§Î•ò:', error)
    throw error
  }
}

// ÏÇ¨Ïö©ÏûêÏùò Î∞© Î∞∞Ï†ï Ï†ïÎ≥¥ Ï°∞Ìöå (Ïù¥Î¶ÑÏúºÎ°ú)
export async function getUserRoomAssignmentByName(userName: string) {
  try {
    console.log('üîç getUserRoomAssignmentByName Ìò∏Ï∂ú:', userName)
    
    // RLSÎ•º Ïö∞ÌöåÌïòÎäî Supabase Ìï®Ïàò ÏÇ¨Ïö©
    const { data, error } = await supabase
      .rpc('get_user_room_by_name', { p_user_name: userName })

    console.log('üìä Î∞© Î∞∞Ï†ï Ï°∞Ìöå Í≤∞Í≥º:', { data, error })

    if (error) {
      console.error('‚ùå Î∞© Î∞∞Ï†ï Ï°∞Ìöå Ïò§Î•ò:', error)
      throw error
    }

    if (!data) {
      console.log('üì≠ Î∞© Î∞∞Ï†ï Ï†ïÎ≥¥ ÏóÜÏùå')
      return null
    }

    console.log('‚úÖ Î∞© Î∞∞Ï†ï Ï†ïÎ≥¥ Ï°∞Ìöå ÏÑ±Í≥µ:', {
      userName: data.user_name,
      roomNumber: data.room_number,
      building: data.building_name
    })

    return data
  } catch (error) {
    console.error('‚ùå getUserRoomAssignmentByName Ïò§Î•ò:', error)
    throw error
  }
}

// ÌäπÏ†ï Î∞©Ïùò Î™®Îì† Í±∞Ï£ºÏûê Ï†ïÎ≥¥ Ï°∞Ìöå
export async function getRoommates(roomId: string) {
  try {
    console.log('üë• getRoommates Ìò∏Ï∂ú:', roomId)
    
    // RLSÎ•º Ïö∞ÌöåÌïòÎäî Supabase Ìï®Ïàò ÏÇ¨Ïö©
    const { data, error } = await supabase
      .rpc('get_roommates_by_room_id', { p_room_id: roomId })

    console.log('üë• ÎèôÏàôÏûê Ï°∞Ìöå Í≤∞Í≥º:', { data, error })

    if (error) {
      console.error('‚ùå ÎèôÏàôÏûê Ï°∞Ìöå Ïò§Î•ò:', error)
      throw error
    }

    // JSON Î∞∞Ïó¥ÏùÑ ÏùºÎ∞ò Î∞∞Ïó¥Î°ú Î≥ÄÌôò
    const roommates = data || []
    console.log('üë• ÎèôÏàôÏûê Ïàò:', roommates.length)
    
    return roommates
  } catch (error) {
    console.error('‚ùå getRoommates Ïò§Î•ò:', error)
    throw error
  }
}

// Î™®Îì† Î∞© Î∞∞Ï†ï Ï†ïÎ≥¥ Ï°∞Ìöå (Í¥ÄÎ¶¨ÏûêÏö©)
export async function getAllRoomAssignments() {
  try {
    const { data, error } = await supabase
      .from('room_assignments')
      .select(`
        *,
        users:user_id (
          name,
          school,
          major,
          generation,
          phone_number,
          gender
        ),
        rooms:room_id (
          room_number,
          building_name,
          capacity,
          Type
        )
      `)
      .order('room_number')

    if (error) throw error
    return data || []
  } catch (error) {
    console.error('‚ùå getAllRoomAssignments Ïò§Î•ò:', error)
    throw error
  }
}

// Î∞©Î≥Ñ Î∞∞Ï†ï ÌòÑÌô© Ï°∞Ìöå
export async function getRoomOccupancy() {
  try {
    const { data, error } = await supabase
      .from('room_assignment_summary')
      .select('*')
      .order('building_name, room_number')

    if (error) throw error
    return data || []
  } catch (error) {
    console.error('‚ùå getRoomOccupancy Ïò§Î•ò:', error)
    throw error
  }
}

// ÏÇ¨Ïö©Ïûê Ïù¥Î¶ÑÏúºÎ°ú Î∞© Ï†ïÎ≥¥ Í≤ÄÏÉâ
export async function searchUserRoom(userName: string) {
  try {
    const { data, error } = await supabase
      .from('room_assignments')
      .select(`
        *,
        users:user_id (
          name,
          school,
          major,
          generation
        ),
        rooms:room_id (
          room_number,
          building_name,
          capacity,
          Type
        )
      `)
      .ilike('user_name', `%${userName}%`)

    if (error) throw error
    return data || []
  } catch (error) {
    console.error('‚ùå searchUserRoom Ïò§Î•ò:', error)
    throw error
  }
}

// Í±¥Î¨ºÎ≥Ñ Î∞© Î∞∞Ï†ï ÌòÑÌô©
export async function getRoomsByBuilding() {
  try {
    const { data, error } = await supabase
      .from('room_assignment_summary')
      .select('*')
      .order('building_name, room_number')

    if (error) throw error

    // Í±¥Î¨ºÎ≥ÑÎ°ú Í∑∏Î£πÌôî
    const groupedByBuilding = (data || []).reduce((acc: any, room: any) => {
      const building = room.building_name || 'Í∏∞ÌÉÄ'
      if (!acc[building]) {
        acc[building] = []
      }
      acc[building].push(room)
      return acc
    }, {})

    return groupedByBuilding
  } catch (error) {
    console.error('‚ùå getRoomsByBuilding Ïò§Î•ò:', error)
    throw error
  }
}
